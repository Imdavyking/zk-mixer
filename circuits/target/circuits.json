{"noir_version":"1.0.0-beta.4+3a5a15ac70e52b4e67edc69e8aa5ad7780523f87","hash":"16088604356242979088","abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullfier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proof","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"is_even","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"3559124755279371145":{"error_kind":"string","string":"Computed nullifier hash does not match the provided nullifier hash"},"13687630160716619492":{"error_kind":"string","string":"Computed root does not match the provided root"}}},"bytecode":"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","debug_symbols":"7d3RavIwGIfxe8mxB0matNVb+Rijah2FUqXqB0O89+mw2/uHsh0Pn8M0b4L5HT1nXty2XZ/fXrthtz+61b+L6/eb5tTth9vq4qL//HY8NMN9eTw148mtilwuXDts3Sr58rpwu65v3Sr762JmNE6jwYzWM6OxCtO1sSr8z8OhqorHcKiW8ZdhH6dfEXyZ7fDLwsXwBG+MT/DGYu6N2fvHkZzi339jeoI35tk3lulxpPTJvvF+opw7UX2dqIvws0qu83R5XH6Phj8KWMFhOWo4LMcSDsNReDgsR4DDckQ4LEcBh+VIcFiODIfloEqFgyoVDqpUOKhSy5GoUuGgSoWDKhUOqlQ4EhyWgyoVDqpUOKhS4aBKhYMqtRyZKhUOqlQ4qFLhoEqFI8FhOahS4aBKhYMqFQ6qVDioUstRUqXCQZUKB1UqHFSpcCQ4LAdVKhxUqXBQpcJBlQoHVWo5KqpUOKhS4aBKhYMqFY4Eh+WgSoWDKhUOqlQ4qFLhoEotR02VCgdVKhxUqXBQpcKR4LAcVKlwUKXCQZUKB1UqHFSp5VhSpcJBlQoHVSocVKlwJDgsB1UqHFSpcFClwkGVCgdVajmCJ0vVgy5VD8JUPShT9Uh4iAdtqh7EqXpQp+pBnqoHfSoegT5VD/pUPehT9aBP1SPhIR70qXrQp+pBn6oHfaoe9Kl4RPpUPehT9aBP1YM+VY+Eh3jQp+ox26d1+vKwR/z15bZYj13fd2+v9k/ubp//N2PXrPv2sdydh43ZPb0fpp3p/GHcb9rteWzvN33u3a7/AA==","file_map":{"50":{"source":"use dep::poseidon::poseidon2;\nmod merkle_tree;\nfn main(\n    // public inputs\n    root: pub Field,\n    nullfier_hash: pub Field,\n    recipient: pub Field,\n    // private inputs\n    secret: Field,\n    nullifier: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n) {\n    // compute the commitment Poseidon(nullifier, secret)\n    let commitment = poseidon2::Poseidon2::hash([nullifier, secret], 2);\n    // check that the nullfier matches the nullifier hash\n    let computed_nullifier_hash = poseidon2::Poseidon2::hash([nullifier], 1);\n    assert(\n        computed_nullifier_hash == nullfier_hash,\n        \"Computed nullifier hash does not match the provided nullifier hash\",\n    );\n    //check the commitment is in the merkle tree\n    let computed_root = merkle_tree::compute_merkle_root(commitment, merkle_proof, is_even);\n    assert(computed_root == root, \"Computed root does not match the provided root\");\n    let recipient_binding = recipient * recipient; // recipient * recipient'\n    // check that the recipient matches the recipient binding\n    assert(\n        recipient_binding == recipient * recipient,\n        \"Recipient does not match the recipient binding\",\n    );\n}\n\n// #[test]\n// fn test_main() {\n//     main(1, 2);\n\n//     // Uncomment to make test fail\n//     // main(1, 1);\n// }\n","path":"/Users/dave/Work/zk-mixer/circuits/src/main.nr"},"51":{"source":"use dep::poseidon::poseidon2;\n\npub fn compute_merkle_root(leaf: Field, merkle_proof: [Field; 20], is_even: [bool; 20]) -> Field {\n    // temporary variable to store the hash for the current level we are working on\n    let mut hash = leaf;\n    // increment through the levels\n    for i in 0..20 {\n        // if the current level is even, we hash the current hash and the proof\n        let (left, right) = if is_even[i] {\n            (hash, merkle_proof[i])\n        } else {\n            (merkle_proof[i], hash)\n        };\n        // compute the hash for the current level\n        hash = poseidon2::Poseidon2::hash([left, right], 2);\n    }\n    // return the root hash\n    hash\n}\n","path":"/Users/dave/Work/zk-mixer/circuits/src/merkle_tree.nr"},"58":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/dave/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}